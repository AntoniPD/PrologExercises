/* 
  P08 (**) Eliminate consecutive duplicates of list elements.
  If a list contains repeated elements they should be replaced with a single copy of the element. The order of the elements should not be changed.

  Example:
  ?- compress([a,a,a,a,b,c,c,a,a,d,e,e,e,e],X).
  X = [a,b,c,a,d,e]
*/

my_member(X, [X|_]).
my_member(X, [H|T]) :- X \= H, my_member(X, T).

my_reverse(L, R) :- my_reverse_helper(L, [], R).

my_reverse_helper([], L, L).
my_reverse_helper([H|T], L, R) :- my_reverse_helper(T, [H|L], R).

compress([], []).
compress([H|T], [H|L]) :- not(my_member(H,T)), compress(T, L).
compress([H|T], L) :- my_member(H, T), compress(T, L).

/*
  P09 (**) Pack consecutive duplicates of list elements into sublists.
  If a list contains repeated elements they should be placed in separate sublists.

  Example:
  ?- pack([a,a,a,a,b,c,c,a,a,d,e,e,e,e],X).
  X = [[a,a,a,a],[b],[c,c],[a,a],[d],[e,e,e,e]]
*/

my_append([], L, L).
my_append([H|T], L, [H|R]) :- my_append(T, L, R).

my_reverse(L, R) :- my_reverse_helper(L, [], R).

my_reverse_helper([], L, L).
my_reverse_helper([H|T], L, R) :- my_reverse_helper(T, [H|L], R).

pack(L, R) :- pack_helper(L, 1, [], R1), my_reverse(R1, R).

get_first_el(H, [H|_]).

is_empty([]).

create_list_of_N_el(_, 0, []).
create_list_of_N_el(X, N, [X|L]) :- N > 0, N1 is N - 1, create_list_of_N_el(X, N1, L).

pack_helper([], _, L, L).
pack_helper([H|T], N, R, K) :- is_empty(T), create_list_of_N_el(H, N, L), pack_helper(T, 1, [L|R], K).
pack_helper([H|T], N, R, K) :- not(is_empty(T)), get_first_el(X, T), H = X, N1 is N + 1, pack_helper(T, N1, R, K).
pack_helper([H|T], N, R, K) :- not(is_empty(T)), get_first_el(X, T), H \= X, create_list_of_N_el(H, N, L), pack_helper(T, 1, [L|R], K).

/* 
  P10 (*) Run-length encoding of a list.
  Use the result of problem P09 to implement the so-called run-length encoding data compression method. Consecutive duplicates of elements are encoded as terms [N,E] where N is the number of duplicates of the element E.

  Example:
  ?- encode([a,a,a,a,b,c,c,a,a,d,e,e,e,e],X).
  X = [[4,a],[1,b],[2,c],[2,a],[1,d][4,e]]
*/
encode(L, R) :- encode_helper(L, 1, R).

encode_helper([], _, []).
encode_helper([H], N, [[N,H]]).
encode_helper([H,H|T], N, R) :- N1 is N + 1, encode_helper([H|T], N1, R).
encode_helper([H, M|T], N, [[N,H]|R]) :- M \= H, encode_helper([M|T], 1, R).

/* 
  P11 (*) Modified run-length encoding.
  Modify the result of problem P10 in such a way that if an element has no duplicates it is simply copied into the result list. Only elements with duplicates are transferred as [N,E] terms.

  Example:
  ?- encode_modified([a,a,a,a,b,c,c,a,a,d,e,e,e,e],X).
  X = [[4,a],b,[2,c],[2,a],d,[4,e]]
*/

encode_modified(L, R) :- encode_modified_helper(L, 1, R).

encode_modified_helper([], _, []).
encode_modified_helper([H], N, [[N,H]]).
encode_modified_helper([H,H|T], N, R) :- N1 is N + 1, encode_modified_helper([H|T], N1, R).
encode_modified_helper([H, M|T], N, [[N,H]|R]) :- N \= 1, M \= H, encode_modified_helper([M|T], 1, R).
encode_modified_helper([H, M|T], 1, [H|R]) :- M \= H, encode_modified_helper([M|T], 1, R).
