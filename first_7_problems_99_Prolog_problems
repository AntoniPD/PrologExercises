% P01 Find the last element of a list.
%Example:
%?- my_last(X,[a,b,c,d]).
%X = d

my_last(X, [X]).
my_last(X, [_|T]) :- my_last(X, T).


% P02 (*) Find the last but one element of a list.
my_last_but_one(X, [X,_]).
my_last_but_one(X, [_|T]) :- my_last_but_one(X, T).

/* 
  P03 (*) Find the K'th element of a list.
  The first element in the list is number 1.
  Example:
  ?- element_at(X,[a,b,c,d,e],3).
  X = c
*/

element_at(X, [X|_], 1).
element_at(X, [_|T], N) :- N1 is N - 1, element_at(X, T, N1).

% P04 (*) Find the number of elements of a list.

len([], 0).
len([_|T], N) :- len(T, N1), N is N1 + 1.

% P05 (*) Reverse a list.

my_reverse_helper([], L, L).
my_reverse_helper([H|T], L, R) :- my_reverse_helper(T, [H|L], R).  

my_reverse(L, R) :- my_reverse_helper(L, [], R).

% P06 (*) Find out whether a list is a palindrome.

are_equal_lists([], []).
are_equal_lists([H|T], [H|R]) :- are_equal_lists(T, R).

is_palindrome(L) :- my_reverse(L, LP), are_equal_lists(L, LP).

% better
is_palindrome1(L) :- my_reverse(L,L).

/* 
  P07 (**) Flatten a nested list structure.
  Transform a list, possibly holding lists as elements into a `flat' list by replacing each list with its elements (recursively).

  Example:
  ?- my_flatten([a, [b, [c, d], e]], X).
  X = [a, b, c, d, e]
*/
 
is_list([]).
is_list([_|_]).

my_append([], L, L).
my_append([H|T], L, [H|R]) :- my_append(T, L, R). 
    
my_flatten([], []).
my_flatten([H|T], R) :- my_flatten(H, R1), my_flatten(T, R2), my_append(R1, R2, R). 
my_flatten(X, [X]) :- not(is_list(X)).

