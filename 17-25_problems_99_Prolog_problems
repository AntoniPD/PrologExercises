/*
 P17 (*) Split a list into two parts; the length of the first part is given.
  Do not use any predefined predicates.

  Example:
  ?- split([a,b,c,d,e,f,g,h,i,k],3,L1,L2).
  L1 = [a,b,c]
  L2 = [d,e,f,g,h,i,k]
*/

split([], 0, [], []).
split([H|T], N, [H|L1], L2) :- N > 0, N1 is N - 1, split(T, N1, L1, L2).
split([H|T], 0, L1, [H|L2]) :- split(T, 0, L1, L2).


/*
 P18 (**) Extract a slice from a list.
  Given two indices, I and K, the slice is the list containing the elements between the I'th and K'th element of the original list (both limits included). Start counting the elements with 1.

  Example:
  ?- slice([a,b,c,d,e,f,g,h,i,k],3,7,L).
  X = [c,d,e,f,g]
*/

slice(L, N, M, R) :- slice_helper(L, N, M, 1, 0, R).

slice_helper([], N, M, N, M, []).
slice_helper([_|T], N, M, N1, M1, R) :- N > N1, N2 is N1 + 1, M2 is M1 + 1, slice_helper(T, N, M, N2, M2, R).
slice_helper([H|T], N, M, N, M1, [H|R]) :- M > M1, M2 is M1 + 1, slice_helper(T, N, M, N, M2, R).
slice_helper([_|T], N, M, N, M, R) :- slice_helper(T, N, M, N, M, R).


/*
 P19 (**) Rotate a list N places to the left.
  Examples:
  ?- rotate([a,b,c,d,e,f,g,h],3,X).
  X = [d,e,f,g,h,a,b,c]

  ?- rotate([a,b,c,d,e,f,g,h],-2,X).
  X = [g,h,a,b,c,d,e,f]
*/

rotate(L, N, R) :- rotate_helper(L, N, [], R).

rotate_helper(T, 0, L, R) :- reverse(L, L1), append(T, L1, R).
rotate_helper([H|T], N, L, R) :- N > 0, N1 is N - 1, rotate_helper(T, N1, [H|L], R).
rotate_helper(L, N, L1, R) :- N < 0, length(L, X), N1 is X + N, rotate_helper(L, N1, L1,R). 

/*
 P20 (*) Remove the K'th element from a list.
  Example:
  ?- remove_at(X,[a,b,c,d],2,R).
  X = b
  R = [a,c,d]
*/


remove_at(H, [H|T], 1, T).
remove_at(X, [H|T], N, [H|R]) :- 
  N > 1, N1 is N - 1, remove_at(X, T, N1, R).
